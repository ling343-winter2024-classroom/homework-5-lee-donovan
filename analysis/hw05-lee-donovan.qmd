---
title: "Homework 5"
author: "Donovan Lee"
date: 04/16/2024
format: 
  html:
    embed-resources: true
---

## Set-Up
```{r}
#| warning: false

library(tidyverse)
library(kableExtra)
library(gt)
library(here)
```
## Background
For this analysis, the data is derived from a study involving the use of maze tasks to explore the concept of language readers predicting (or expecting) future words in a sentence. To further explain, a maze task is a methodology that involves a participant being shown a sentence whose words have been parsed into separate screens; however, each word is paired with a "distraction" word (a real word that does not belong in the current part of the sentence: grammatically or lexical).


In this study, participants were given these maze tasks and their reaction times to the correct word were recorded. After some of maze task sentences, they were then given a comprehension question with a yes/no answer. For example, one of the test sentence is "The therapist set up a meeting with the upset woman and her husband yesterday", and a participant would be given a choice between "therapist" or "socialism" for the second word. This would continue until the end of the sentence, and then, for this sentence, they are given the question of "Was this woman married?".
## Data Dictionary
```{r}
dataDict <- tibble::tribble(
  ~variable, ~summary,
  "Index", "",
  "Time", "the time recorded when the experiment took place",
  "Counter", "",
  "Hash", "the hash value of the participant",
  "Owner", "a conditional that determines if the participant is the experiment owner",
  "Controller", "the type of instruction given to the participant (Form, Maze, and Question)",
  "Item", "the id of the sentence given",
  "Element", "determines if there is a sentence or question given",
  "Type", "the type of maze task given",
  "Group", "",
  "FieldName", "the field names shown for the Form information of the participant",
  "Value", "the field values shown for the Form information of the participant",
  "WordNum", "the position of the word in the experiment sentence",
  "Word", "the original word of the sentence",
  "Alt", "the alternative word for the sentence",
  "WordOn", "a conditional that determines if the current word is the original or the alternative (0 = original, 1 = alternative)",
  "CorrWord", "a conditional that determines if the participant guessed if the word was correct or incorrect",
  "RT", "the reaction time to the first answer",
  "Sent", "the entire original sentence",
  "TotalTime", "the total time towards the correct answer",
  "Question", "a comprehension question given after the sentence",
  "Resp", "the response to the question (yes/no)",
  "Acc", "a conditional that determines if the response is correct",
  "RespRT", "the reaction time of the response"
)

dataDict |>
  kbl() |>
  kable_styling(bootstrap_options = c("striped"))
```
## Importing the Data
```{r}
here::i_am("analysis/hw05-lee-donovan.qmd")

df_all <- read.csv(here("data/delong maze 40Ss.csv"), 
              header = 1, sep = ",", comment.char = "#", strip.white = T,
              col.names = c("Index","Time","Counter","Hash","Owner","Controller","Item","Element","Type","Group","FieldName","Value","WordNum","Word","Alt","WordOn","CorrWord","RT","Sent","TotalTime","Question","Resp","Acc","RespRT"))
```

```{r}
df_rt <- df_all |> 
  filter(Controller == "Maze" & !str_detect(Type, "prac")) |> 
  select(1:10, 13:20) |> 
  separate(col = Type, 
           into = c("exp", "item", "expect", "position", "pos", 
                    "cloze", "art.cloze", "n.cloze"), 
           sep = "\\.", convert = TRUE, fill = "right") |> 
  mutate(WordNum = as.numeric(WordNum),
         Acc = as.numeric(as.character(recode(CorrWord, yes = "1", no = "0"))),
         n.cloze.scale =  scale(n.cloze), 
         art.cloze.scale = scale(art.cloze)) |> 
  mutate(across(where(is.character), as.factor)) |> 
  filter(item != 29) |> 
  filter(Hash != "9dAvrH0+R6a0U5adPzZSyA")

rt.s <- df_rt 

rt.s$rgn.fix <- rt.s$WordNum - rt.s$pos + 1
rt.s$word.num.z <- scale(rt.s$WordNum)
rt.s$word.len <- nchar(as.character(rt.s$Word))
rt.s$Altword.len <- nchar(as.character(rt.s$Alt))
# simplying by using dummy/treatment coding instead of sum coding
# 'expected' will be reference level
#contrasts(rt.s$expect) <- c(-.5,.5)

rt.s$item.expect <- paste(rt.s$item, rt.s$expect, sep=".")
rt.s.filt <- rt.s[rt.s$Hash != "gyxidIf0fqXBM7nxg2K7SQ" & rt.s$Hash != "f8dC3CkleTBP9lUufzUOyQ",]

rgn.rt.raw <- rt.s.filt %>%
  filter(rgn.fix > -4 & rgn.fix < 5) %>%
  filter(Acc == 1) %>%
  group_by(rgn.fix, expect) %>%
  summarize(n = n(), subj = length(unique(Hash)), rt = mean(RT), 
            sd = sd(RT), stderr = sd / sqrt(subj)) %>%
  as.data.frame()
rgn.rt.raw$rgn <- as.factor(recode(rgn.rt.raw$rgn.fix, "-3"="CW-3", "-2"="CW-2", "-1"="CW-1", "0"="art", "1"="n","2"="CW+1", "3"="CW+2", "4"="CW+3"))
rgn.rt.raw$rgn <- ordered(rgn.rt.raw$rgn, levels = c("CW-3", "CW-2", "CW-1", "art", "n", "CW+1", "CW+2", "CW+3"))

rt.s.filt |> 
  filter(rgn.fix == 0) |> 
  group_by(Hash, expect) |> 
  summarize(RT = mean(RT, na.rm = TRUE)) |> 
  group_by(expect) |> 
  summarize(RT = mean(RT, na.rm = TRUE)) |>
  gt() |> 
  fmt_number(decimals = 0)
```
## Exploring the Data
Before we are able to fully explore this data, there is something we must remove. According to the article that this data comes from, there was an error with Item 29 that renders it useless for further analysis, so we will remove any rows that contain it from our dataframe.
```{r}

```

To better understand this data, we ought to determine the number of participants whose data was recorded. The 'Hash' variable should determine the number of participants.
```{r}
d |>
  distinct(Hash) |>
  count()

df_all |>
  count(Element)
df_rt |>
  distinct(Item)
```
From this, we can see that there are 39 participants


Since this study involves measuring the reaction times of the participants in response to expected/unexpected words, we should follow a similar path.